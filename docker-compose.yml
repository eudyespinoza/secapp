version: '3.8'

# ==============================================
# SecureApprove - Production Docker Compose
# High Availability Setup with Load Balancing
# ==============================================

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true
  monitoring:
    driver: bridge
  traefik_proxy:
    external: true

volumes:
  mongodb_primary_data:
  mongodb_secondary1_data:
  mongodb_secondary2_data:
  redis_master_data:
  redis_slave1_data:
  redis_slave2_data:
  prometheus_data:
  grafana_data:

services:
  # ==============================================
  # NOTE: Using external Traefik proxy
  # ==============================================

  # ==============================================
  # API INSTANCES - NestJS Backend (3 instances)
  # ==============================================
  api-1:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      target: production
    container_name: secureapprove-api-1
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=api-1
    depends_on:
      mongodb-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - frontend
      - backend
      - monitoring
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.secureapprove-api.rule=Host(`api.secureapprove.com`)"
      - "traefik.http.routers.secureapprove-api.entrypoints=websecure"
      - "traefik.http.routers.secureapprove-api.tls=true"
      - "traefik.http.routers.secureapprove-api.middlewares=cors-headers"
      - "traefik.http.services.secureapprove-api.loadbalancer.server.port=3000"
      - "traefik.http.services.secureapprove-api.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.secureapprove-api.loadbalancer.healthcheck.interval=10s"
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  api-2:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      target: production
    container_name: secureapprove-api-2
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=api-2
    depends_on:
      mongodb-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - frontend
      - backend
      - monitoring
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.secureapprove-api.rule=Host(`api.secureapprove.com`)"
      - "traefik.http.routers.secureapprove-api.entrypoints=websecure"
      - "traefik.http.routers.secureapprove-api.tls=true"
      - "traefik.http.routers.secureapprove-api.middlewares=cors-headers"
      - "traefik.http.services.secureapprove-api.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  api-3:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      target: production
    container_name: secureapprove-api-3
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=api-3
    depends_on:
      mongodb-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - frontend
      - backend
      - monitoring
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.secureapprove-api.rule=Host(`api.secureapprove.com`)"
      - "traefik.http.routers.secureapprove-api.entrypoints=websecure"
      - "traefik.http.routers.secureapprove-api.tls=true"
      - "traefik.http.routers.secureapprove-api.middlewares=cors-headers"
      - "traefik.http.services.secureapprove-api.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ==============================================
  # FRONTEND - Next.js 14 Web Application
  # ==============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      target: production
    container_name: secureapprove-frontend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL}
    depends_on:
      - api-1
      - api-2
      - api-3
    networks:
      - frontend
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.secureapprove-frontend.rule=Host(`secureapprove.com`) || Host(`www.secureapprove.com`)"
      - "traefik.http.routers.secureapprove-frontend.entrypoints=websecure"
      - "traefik.http.routers.secureapprove-frontend.tls=true"
      - "traefik.http.routers.secureapprove-frontend.middlewares=default-sec-headers"
      - "traefik.http.services.secureapprove-frontend.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ==============================================
  # MONGODB - ReplicaSet (Primary + 2 Secondaries)
  # ==============================================
  mongodb-primary:
    image: mongo:7.0
    container_name: secureapprove-mongodb-primary
    restart: unless-stopped
    command: >
      mongod
      --replSet rs0
      --bind_ip_all
      --keyFile /data/keyfile/mongodb.keyfile
      --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
    volumes:
      - mongodb_primary_data:/data/db
      - ./infra/mongodb/keyfile:/data/keyfile:ro
      - ./infra/mongodb/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh:ro
    networks:
      - backend
      - monitoring
    ports:
      - "27019:27017"
    healthcheck:
      test: |
        mongosh --quiet --eval "
        try {
          rs.status();
          db.adminCommand('ping');
        } catch (e) {
          quit(1);
        }"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  mongodb-secondary1:
    image: mongo:7.0
    container_name: secureapprove-mongodb-secondary1
    restart: unless-stopped
    command: >
      mongod
      --replSet rs0
      --bind_ip_all
      --keyFile /data/keyfile/mongodb.keyfile
      --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
    volumes:
      - mongodb_secondary1_data:/data/db
      - ./infra/mongodb/keyfile:/data/keyfile:ro
    networks:
      - backend
    depends_on:
      - mongodb-primary
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M

  mongodb-secondary2:
    image: mongo:7.0
    container_name: secureapprove-mongodb-secondary2
    restart: unless-stopped
    command: >
      mongod
      --replSet rs0
      --bind_ip_all
      --keyFile /data/keyfile/mongodb.keyfile
      --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
    volumes:
      - mongodb_secondary2_data:/data/db
      - ./infra/mongodb/keyfile:/data/keyfile:ro
    networks:
      - backend
    depends_on:
      - mongodb-primary
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M

  # ==============================================
  # REDIS - Master/Slave with Sentinel (HA)
  # ==============================================
  redis-master:
    image: redis:7.2-alpine
    container_name: secureapprove-redis-master
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_master_data:/data
    networks:
      - backend
      - monitoring
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  redis-slave1:
    image: redis:7.2-alpine
    container_name: secureapprove-redis-slave1
    restart: unless-stopped
    command: >
      redis-server
      --slaveof redis-master 6379
      --masterauth ${REDIS_PASSWORD}
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_slave1_data:/data
    networks:
      - backend
    depends_on:
      - redis-master
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  redis-slave2:
    image: redis:7.2-alpine
    container_name: secureapprove-redis-slave2
    restart: unless-stopped
    command: >
      redis-server
      --slaveof redis-master 6379
      --masterauth ${REDIS_PASSWORD}
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_slave2_data:/data
    networks:
      - backend
    depends_on:
      - redis-master
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  sentinel1:
    image: redis:7.2-alpine
    container_name: secureapprove-sentinel1
    restart: unless-stopped
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./infra/redis/sentinel.conf:/etc/redis/sentinel.conf:ro
    networks:
      - backend
    depends_on:
      - redis-master
    ports:
      - "26389:26379"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  sentinel2:
    image: redis:7.2-alpine
    container_name: secureapprove-sentinel2
    restart: unless-stopped
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./infra/redis/sentinel.conf:/etc/redis/sentinel.conf:ro
    networks:
      - backend
    depends_on:
      - redis-master
    ports:
      - "26390:26379"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  sentinel3:
    image: redis:7.2-alpine
    container_name: secureapprove-sentinel3
    restart: unless-stopped
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./infra/redis/sentinel.conf:/etc/redis/sentinel.conf:ro
    networks:
      - backend
    depends_on:
      - redis-master
    ports:
      - "26391:26379"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  # ==============================================
  # MONITORING - Prometheus
  # ==============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: secureapprove-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./infra/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infra/monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    ports:
      - "9091:9090"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ==============================================
  # MONITORING - Grafana
  # ==============================================
  grafana:
    image: grafana/grafana:latest
    container_name: secureapprove-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring
      - frontend
      - traefik_proxy
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.secureapprove-grafana.rule=Host(`grafana.secureapprove.com`)"
      - "traefik.http.routers.secureapprove-grafana.entrypoints=websecure"
      - "traefik.http.routers.secureapprove-grafana.tls=true"
      - "traefik.http.routers.secureapprove-grafana.middlewares=default-sec-headers"
      - "traefik.http.services.secureapprove-grafana.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ==============================================
  # BACKUP SERVICE
  # ==============================================
  backup:
    build:
      context: ./infra/backup
      dockerfile: Dockerfile
    container_name: secureapprove-backup
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS}
    volumes:
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - backend
    depends_on:
      - mongodb-primary
      - redis-master
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
